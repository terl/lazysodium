
/*
 * Copyright (c) Terl Tech Ltd • 02/05/18 14:09 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

plugins {
    id 'java-library'
    id 'application'
    id 'signing'
    id 'maven'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
}

ext {
    artifactId = "lazysodium-java"
    groupId = "com.goterl.lazycode"
    version = '3.7.0'
    description = "Lazysodium (Java) makes it effortless for Java " +
            "developers to get started with Libsodium's cryptography."
}

repositories {
    jcenter()
}


group project.ext.groupId
version = project.ext.version

mainClassName = "com.goterl.lazycode.lazysodium.LazySodium"

sourceCompatibility = 1.8
targetCompatibility = 1.8




// Dependencies
dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation 'net.java.dev.jna:jna:5.3.1'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.28.2'
}


// Tasks
signing {
    // This will use the GPG Agent
    // to sign the jar
    useGpgCmd()
    sign configurations.archives
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


task signPom(type: Sign) {
    sign project.file("$buildDir/publications/mavenJava/pom-default.xml")

    // The signing plugin does not seem to notice
    // it when the publications folder with the
    // signature has been deleted. So we always
    // create a new signature
    outputs.upToDateWhen { false }
}


artifacts {
    archives sourcesJar, javadocJar
}



publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId project.ext.groupId
            artifactId project.ext.artifactId
            version project.ext.version
            artifact sourcesJar
            artifact javadocJar


            project.tasks.withType(Sign) {
                signatures.all {
                    def type = it.type
                    if (it.file.name.endsWith('.tar.gz.asc')) {
                        // Workaround in case a tar.gz file should published
                        type = 'tar.gz.asc'
                    } else if (it.type.equals('xml.asc')) {
                        // Set correct extension for signature of pom file
                        type = 'pom.asc'
                    }
                    artifact source: it.file, classifier: it.classifier ?: null, extension: type
                }
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.ext.description)
                root.appendNode('name', project.ext.artifactId)
                root.appendNode('url', 'https://github.com/terl/lazysodium-java')

                def scm = root.appendNode('scm')
                scm.appendNode("connection", "scm:git:git://github.com/terl/lazysodium-java.git")
                scm.appendNode("developerConnection", "scm:git:ssh://github.com/terl/lazysodium-java")
                scm.appendNode("url", "http://github.com/terl/lazysodium-java")

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Mozilla Public License, Version 2.0')
                license.appendNode('url', 'http://www.mozilla.org/MPL/2.0/index.txt')
                license.appendNode('distribution', 'repo')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('name', 'Terl Tech Ltd')
                developer.appendNode('email', 'hello@terl.co')
            }
        }
    }
}


bintray {
    user = findProperty("bintray.user")
    key = findProperty("bintray.apiKey")
    publications = ['mavenJava']
    publish = true
    pkg {
        repo = 'lazysodium-maven'
        name = project.ext.artifactId
        userOrg = 'terl'
        desc = project.ext.description
        licenses = ['MPL-2.0']
        issueTrackerUrl = "https://github.com/terl/lazysodium-java/issues"
        vcsUrl = 'https://github.com/terl/lazysodium-java.git'

        version {
            name = project.ext.version
            released = new java.util.Date()
            vcsTag = project.ext.version
        }
    }
}


model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.withType(Sign)
    }
    tasks.signPom {
        dependsOn tasks.generatePomFileForMavenJavaPublication
    }
}

tasks.withType(Test) {
    // a collection to track failedTests
    ext.failedTests = []

    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            String failedTest = "${descriptor.className}::${descriptor.name}"
            logger.debug("Adding " + failedTest + " to failedTests...")
            failedTests << [failedTest]
        }
    }

    afterSuite { suite, result ->
        if (!suite.parent) { // will match the outermost suite
            // logs each failed test
            if (!failedTests.empty) {
                logger.lifecycle("Failed tests:")
                failedTests.each { failedTest ->
                    logger.lifecycle("${failedTest}")
                }
            }
        }
    }
}